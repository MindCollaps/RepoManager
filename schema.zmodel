generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

plugin openapi {
    provider = "@zenstackhq/openapi"
    output = "./docs/openapi/api-docs.yaml"
    title = "Repo-Manager API"
    version = "1.0.0"
    flavor = "rest"
    prefix = "/api/data"
}

plugin hooks {
    provider = '@zenstackhq/tanstack-query'
    target = 'vue'
    output = 'lib/hooks'
}

model User {
    id                Int                @id @default(autoincrement())
    email             String             @unique @email
    name              String?            @length(min: 3, max: 39)
    username          String?            @length(min: 6, max: 39)
    git_access_token  String?
    created           DateTime           @default(now())
    gitUserId         Int?
    avatar_url        String?
    GitGroups         GitGroup[]
    Notifications     Notification[]
    GitUser           GitUser?           @relation(fields: [gitUserId], references: [id])
    GroupInviteTokens GroupInviteToken[]

    @@allow('all', auth().id == id)
}

model GitUser {
    id               Int       @id @default(autoincrement())
    git_access_token String?
    email            String    @unique @email
    username         String    @length(min: 6, max: 39)
    name             String    @length(min: 3, max: 39)
    expires          Boolean
    expiryDate       DateTime?
    repoState        Int
    created          DateTime  @default(now())
    gitGroupId       Int?
    avatar_url       String?
    GitGroup         GitGroup? @relation(fields: [gitGroupId], references: [id])
    owner            User[]
    custom           Boolean?

    @@allow('all', owner?[id == auth().id])
}

model GitGroup {
    id                Int                @id @default(autoincrement())
    expires           Boolean
    expiryDate        DateTime?
    deleteUsers       Boolean            @default(true)
    deleteSelf        Boolean            @default(true)
    repoOwner         String
    repoName          String
    created           DateTime           @default(now())
    ownerId           Int
    owner             User               @relation(fields: [ownerId], references: [id])
    users             GitUser[]
    name              String
    GroupInviteTokens GroupInviteToken[]

    @@allow('all', owner.id == auth().id)
}

model Notification {
    id      Int      @id @default(autoincrement())
    title   String
    content String
    read    Boolean
    created DateTime @default(now())
    ownerId Int
    owner   User     @relation(fields: [ownerId], references: [id])

    @@allow('all', owner.id == auth().id)
}

model GroupInviteToken {
    id         Int       @id @default(autoincrement())
    group      GitGroup  @relation(fields: [groupId], references: [id])
    token      String    @unique @length(min: 6, max: 12, message: 'The tokens length can only be between 6 and 12 lettets')
    used       Int       @default(0)
    maxUse     Int
    ownerId    Int
    groupId    Int
    owner      User      @relation(fields: [ownerId], references: [id])
    name       String    @length(min: 3, max: 39, message: 'The tokens name must be between 3 and 39 letters')
    expiryDate DateTime?
    created    DateTime  @default(now())

    @@allow('all', owner.id == auth().id)
}

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

plugin openapi {
    provider = "@zenstackhq/openapi"
    output = "./docs/openapi/api-docs.yaml"
    title = "Repo-Manager API"
    version = "1.0.0"
    flavor = "rest"
    prefix = "/api/data"
}

plugin hooks {
    provider = '@zenstackhq/tanstack-query'
    target = 'vue'
    output = 'lib/hooks'
}

model User {
    id                  Int                @id @default(autoincrement())
    email               String?            @email @lower
    name                String?            @length(min: 3, max: 39)
    username            String?            @length(min: 6, max: 39)
    git_id              Int?               @unique @deny('read', true) @omit
    git_access_token    String?            @deny('read', true) @omit
    git_refresh_token   String?            @deny('read', true) @omit
    git_token_expires   DateTime?          @deny('read', true) @omit
    git_refresh_expires DateTime?          @deny('read', true) @omit
    created             DateTime           @default(now())
    avatar_url          String?
    hasInstallation     Boolean            @deny('update', true) @default(false)
    installationId      Int?               @deny('update,read', true) @omit
    notifications       Notification[]
    groupInviteTokens   GroupInviteToken[]
    ownedGitUsers       GitUserOwner[]
    ownedGitGroups      GitGroupOwner[]

    @@allow('all', auth().id == id)
}

model GitUser {
    id               Int                     @id @default(autoincrement())
    git_access_token String?
    git_id           Int?                    @unique @deny('read', true) @omit
    email            String?                 @unique @email @lower
    username         String                  @length(min: 6, max: 39)
    name             String                  @length(min: 3, max: 39)
    created          DateTime                @default(now())
    avatar_url       String?
    groups           GitUserGroup[]
    custom           Boolean?
    owners           GitUserOwner[]
    usedTokens       GroupInviteTokenUsers[]

    @@allow('all', owners?[owner.id == auth().id])
}

model GitGroup {
    id                Int                      @id @default(autoincrement())
    expires           Boolean
    expiryDate        DateTime?
    deleteUsers       Boolean                  @default(true)
    deleteSelf        Boolean                  @default(true)
    repoOwner         String
    repoName          String
    created           DateTime                 @default(now())
    name              String
    groupInviteTokens GroupInviteTokenGroups[]
    users             GitUserGroup[]
    owners            GitGroupOwner[]

    @@allow('all', owners?[owner.id == auth().id])
}

model GitUserGroup {
    userId    Int      @map("git_user_id")
    groupId   Int      @map("git_group_id")
    repoState Int      @default(0)
    user      GitUser  @relation(fields: [userId], references: [id], onDelete: Cascade)
    group     GitGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

    @@id([userId, groupId])
    @@map("git_user_groups")

    @@allow('create,read,delete', 
        user.owners?[owner.id == auth().id] ||
        group.owners?[owner.id == auth().id]
    )

    @@deny('update', true)
}

model GitUserOwner {
    ownerId   Int     @map("owner_id")
    gitUserId Int     @map("git_user_id")
    owner     User    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    gitUser   GitUser @relation(fields: [gitUserId], references: [id], onDelete: Cascade)

    @@id([ownerId, gitUserId])
    @@map("git_user_owners")

    @@allow('create,read,delete', owner.id == auth().id)
    @@deny('update', true)
}

model GitGroupOwner {
    ownerId Int      @map("owner_id")
    groupId Int      @map("group_id")
    owner   User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    group   GitGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

    @@id([ownerId, groupId])
    @@map("git_group_owners")

    @@allow('create,read,delete', owner.id == auth().id)
    @@deny('update', true)
}

model Notification {
    id      Int      @id @default(autoincrement())
    title   String
    content String
    read    Boolean  @default(false)
    created DateTime @default(now())
    style   String
    link    String?
    ownerId Int
    owner   User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

    @@allow('read', owner.id == auth().id)
}

model GroupInviteToken {
    id         Int                      @id @default(autoincrement())
    token      String                   @unique @length(min: 6, max: 12)
    maxUse     Int
    ownerId    Int
    owner      User                     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    name       String                   @length(min: 3, max: 39)
    expiryDate DateTime?
    created    DateTime                 @default(now())
    groups     GroupInviteTokenGroups[]
    usedBy     GroupInviteTokenUsers[]

    @@allow('create,read,delete', owner.id == auth().id)
    @@allow('update', owner.id == auth().id)
}

model GroupInviteTokenGroups {
    tokenId Int              @map("token_id")
    groupId Int              @map("group_id")
    token   GroupInviteToken @relation(fields: [tokenId], references: [id], onDelete: Cascade)
    group   GitGroup         @relation(fields: [groupId], references: [id], onDelete: Cascade)

    @@id([tokenId, groupId])
    @@map("group_invite_token_groups")

    @@allow('create,read,delete', 
        token.owner.id == auth().id ||
        group.owners?[owner.id == auth().id]
    )

    @@deny('update', true)
}

model GroupInviteTokenUsers {
    tokenId Int              @map("token_id")
    userId  Int              @map("user_id")
    token   GroupInviteToken @relation(fields: [tokenId], references: [id], onDelete: Cascade)
    user    GitUser          @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([tokenId, userId])
    @@map("group_invite_token_users")

    @@allow('read', 
        token.owner.id == auth().id ||
        user.owners?[owner.id == auth().id]
    )

    @@deny('update, create, delete', true)
}

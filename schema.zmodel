generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

plugin openapi {
    provider = "@zenstackhq/openapi"
    output = "./docs/openapi/api-docs.yaml"
    title = "Repo-Manager API"
    version = "1.0.0"
    flavor = "rest"
    prefix = "/api/data"
}

plugin hooks {
    provider = '@zenstackhq/tanstack-query'
    target = 'vue'
    output = 'lib/hooks'
}

model User {
    id                Int                @id @default(autoincrement())
    email             String             @unique @email
    name              String?            @length(min: 3, max: 39)
    username          String?            @length(min: 6, max: 39)
    git_access_token  String?
    created           DateTime           @default(now())
    avatar_url        String?
    Notifications     Notification[]
    GroupInviteTokens GroupInviteToken[]
    ownedGitUsers     GitUserOwner[]
    ownedGitGroups    GitGroupOwner[]

    @@allow('all', auth().id == id)
}

model GitUser {
    id               Int            @id @default(autoincrement())
    git_access_token String?
    email            String         @unique @email
    username         String         @length(min: 6, max: 39)
    name             String         @length(min: 3, max: 39)
    expires          Boolean
    expiryDate       DateTime?
    repoState        Int
    created          DateTime       @default(now())
    avatar_url       String?
    groups           GitUserGroup[]
    custom           Boolean?
    owners           GitUserOwner[]

    @@allow('all', owners?[owner.id == auth().id])
}

model GitGroup {
    id                Int                @id @default(autoincrement())
    expires           Boolean
    expiryDate        DateTime?
    deleteUsers       Boolean            @default(true)
    deleteSelf        Boolean            @default(true)
    repoOwner         String
    repoName          String
    created           DateTime           @default(now())
    name              String
    GroupInviteTokens GroupInviteToken[]
    users             GitUserGroup[]
    owners            GitGroupOwner[]

    @@allow('all', owners?[owner.id == auth().id])
}

model GitUserGroup {
    userId    Int      @map("git_user_id")
    groupId   Int      @map("git_group_id")
    repoState Int
    user      GitUser  @relation(fields: [userId], references: [id])
    group     GitGroup @relation(fields: [groupId], references: [id])

    @@allow('read,update', 
        user.owners?[owner.id == auth().id] ||
        group.owners?[owner.id == auth().id]
    )

    @@id([userId, groupId])
    @@map("git_user_groups")
}

model GitUserOwner {
    ownerId   Int     @map("owner_id")
    gitUserId Int     @map("git_user_id")
    owner     User    @relation(fields: [ownerId], references: [id])
    gitUser   GitUser @relation(fields: [gitUserId], references: [id])

    @@id([ownerId, gitUserId])
    @@map("git_user_owners")

    @@allow('all', owner.id == auth().id)
}

model GitGroupOwner {
    ownerId Int      @map("owner_id")
    groupId Int      @map("group_id")
    owner   User     @relation(fields: [ownerId], references: [id])
    group   GitGroup @relation(fields: [groupId], references: [id])

    @@id([ownerId, groupId])
    @@map("git_group_owners")

    @@allow('all', owner.id == auth().id)
}

model Notification {
    id      Int      @id @default(autoincrement())
    title   String
    content String
    read    Boolean
    created DateTime @default(now())
    ownerId Int
    owner   User     @relation(fields: [ownerId], references: [id])

    @@allow('all', owner.id == auth().id)
}

model GroupInviteToken {
    id         Int       @id @default(autoincrement())
    group      GitGroup  @relation(fields: [groupId], references: [id])
    token      String    @unique @length(min: 6, max: 12, message: 'The tokens length can only be between 6 and 12 lettets')
    used       Int       @default(0)
    maxUse     Int
    ownerId    Int
    groupId    Int
    owner      User      @relation(fields: [ownerId], references: [id])
    name       String    @length(min: 3, max: 39, message: 'The tokens name must be between 3 and 39 letters')
    expiryDate DateTime?
    created    DateTime  @default(now())

    @@allow('all', owner.id == auth().id)
}

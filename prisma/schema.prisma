//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                Int                @id() @default(autoincrement())
  email             String             @unique()
  name              String?
  username          String?
  git_access_token  String?
  created           DateTime           @default(now())
  gitUserId         Int?
  avatar_url        String?
  GitGroups         GitGroup[]
  Notifications     Notification[]
  GitUser           GitUser?           @relation(fields: [gitUserId], references: [id])
  GroupInviteTokens GroupInviteToken[]
}

model GitUser {
  id               Int       @id() @default(autoincrement())
  git_access_token String?
  email            String    @unique()
  username         String
  name             String
  expires          Boolean
  expiryDate       DateTime?
  repoState        Int
  created          DateTime  @default(now())
  gitGroupId       Int?
  avatar_url       String?
  GitGroup         GitGroup? @relation(fields: [gitGroupId], references: [id])
  owner            User[]
  custom           Boolean?
}

model GitGroup {
  id                Int                @id() @default(autoincrement())
  expires           Boolean
  expiryDate        DateTime?
  deleteUsers       Boolean            @default(true)
  deleteSelf        Boolean            @default(true)
  repoOwner         String
  repoName          String
  created           DateTime           @default(now())
  ownerId           Int
  owner             User               @relation(fields: [ownerId], references: [id])
  users             GitUser[]
  name              String
  GroupInviteTokens GroupInviteToken[]
}

model Notification {
  id      Int      @id() @default(autoincrement())
  title   String
  content String
  read    Boolean
  created DateTime @default(now())
  ownerId Int
  owner   User     @relation(fields: [ownerId], references: [id])
}

model GroupInviteToken {
  id         Int       @id() @default(autoincrement())
  group      GitGroup  @relation(fields: [groupId], references: [id])
  token      String    @unique()
  used       Int       @default(0)
  maxUse     Int
  ownerId    Int
  groupId    Int
  owner      User      @relation(fields: [ownerId], references: [id])
  name       String
  expiryDate DateTime?
  created    DateTime  @default(now())
}

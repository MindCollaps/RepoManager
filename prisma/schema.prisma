//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                Int                @id() @default(autoincrement())
  email             String             @unique()
  name              String?
  username          String?
  git_access_token  String?
  created           DateTime           @default(now())
  avatar_url        String?
  Notifications     Notification[]
  GroupInviteTokens GroupInviteToken[]
  ownedGitUsers     GitUserOwner[]
  ownedGitGroups    GitGroupOwner[]
}

model GitUser {
  id               Int            @id() @default(autoincrement())
  git_access_token String?
  email            String         @unique()
  username         String
  name             String
  expires          Boolean
  expiryDate       DateTime?
  created          DateTime       @default(now())
  avatar_url       String?
  groups           GitUserGroup[]
  custom           Boolean?
  owners           GitUserOwner[]
}

model GitGroup {
  id                Int                      @id() @default(autoincrement())
  expires           Boolean
  expiryDate        DateTime?
  deleteUsers       Boolean                  @default(true)
  deleteSelf        Boolean                  @default(true)
  repoOwner         String
  repoName          String
  created           DateTime                 @default(now())
  name              String
  GroupInviteTokens GroupInviteTokenGroups[]
  users             GitUserGroup[]
  owners            GitGroupOwner[]
}

model GitUserGroup {
  userId    Int      @map("git_user_id")
  groupId   Int      @map("git_group_id")
  repoState Int      @default(0)
  user      GitUser  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     GitGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([userId, groupId])
  @@map("git_user_groups")
}

model GitUserOwner {
  ownerId   Int     @map("owner_id")
  gitUserId Int     @map("git_user_id")
  owner     User    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  gitUser   GitUser @relation(fields: [gitUserId], references: [id], onDelete: Cascade)

  @@id([ownerId, gitUserId])
  @@map("git_user_owners")
}

model GitGroupOwner {
  ownerId Int      @map("owner_id")
  groupId Int      @map("group_id")
  owner   User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  group   GitGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([ownerId, groupId])
  @@map("git_group_owners")
}

model Notification {
  id      Int      @id() @default(autoincrement())
  title   String
  content String
  read    Boolean
  created DateTime @default(now())
  ownerId Int
  owner   User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model GroupInviteToken {
  id         Int                      @id() @default(autoincrement())
  token      String                   @unique()
  used       Int                      @default(0)
  maxUse     Int
  ownerId    Int
  owner      User                     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  name       String
  expiryDate DateTime?
  created    DateTime                 @default(now())
  groups     GroupInviteTokenGroups[]
}

model GroupInviteTokenGroups {
  tokenId Int              @map("token_id")
  groupId Int              @map("group_id")
  token   GroupInviteToken @relation(fields: [tokenId], references: [id], onDelete: Cascade)
  group   GitGroup         @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([tokenId, groupId])
  @@map("group_invite_token_groups")
}
